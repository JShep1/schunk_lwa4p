<?xml version="1.0"?>
<!-- File description
  Purpose of this launch file is to give an easy "reset" functionality. The launch file will
  start a node that resets the arm to ZERO position (completely streched out) and then terminates
  -->
<launch>

  <!-- GDB functionality -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <arg name="frequency" default="30" />
  <arg name="pcan_device" default="/dev/pcanusbfd32" />

  <!-- Set the param that trajectory_execution_manager needs to find the controller plugin -->
  <!--
 <arg name="moveit_controller_manager" default="moveit_simple_controller_manager/MoveItSimpleControllerManager" />
 <param name="moveit_controller_manager" value="$(arg moveit_controller_manager)"/>
 -->
 <!-- load controller_list -->
 <!--
 <rosparam file="$(find schunk_gripper_communication)/config/arm_controllers.yaml"/>
 -->


  <include file="$(find schunk_gripper_communication)/launch/demo.launch"></include>

  <node name="schunk_gripper_communication_node" pkg="schunk_gripper_communication" type="schunk_gripper_server" output="screen" launch-prefix="$(arg launch_prefix)">
    <!--   Set env variable for the error codes   -->
    <env name="CANOPEN_RESOURCE_PATH" value="$(find schunk_gripper_communication)/etc/error_codes" />
    <param name="frequency"           type="int"      value="$(arg frequency)" />
    <param name="can_device_name"          type="string"   value="$(arg pcan_device)"   />
    <rosparam command="load" file="$(find schunk_gripper_communication)/config/example_config.yaml"/>
    <rosparam command="load" file="$(find schunk_gripper_communication)/config/node_mapping.yaml"/>

  </node>
</launch>
